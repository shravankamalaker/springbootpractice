package com.example.springbootsecurity.SpringBootRestSecurity.config;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.springbootsecurity.SpringBootRestSecurity.model.DAOUser;
import com.example.springbootsecurity.SpringBootRestSecurity.model.UserDTO;
import com.example.springbootsecurity.SpringBootRestSecurity.model.UserRepository;

@Service
public class CustomUserDetailsService implements UserDetailsService {

	@Autowired
	private UserRepository userDAO;

	@Lazy
	@Autowired
	private PasswordEncoder passwordEncoder;

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		List<SimpleGrantedAuthority> roles = null;

		DAOUser  user = userDAO.findUserByUsername(username);
		if (username.equals("admin")) {
			roles = Arrays.asList(new SimpleGrantedAuthority("ROLE_ADMIN"));
			return new User("admin", "$2y$12$I0Di/vfUL6nqwVbrvItFVOXA1L9OW9kLwe.1qDPhFzIJBpWl76PAe", roles);
		} /*
			 * else if (username.equals("user")) { roles = Arrays.asList(new
			 * SimpleGrantedAuthority("ROLE_USER")); return new User("user",
			 * "$2y$12$VfZTUu/Yl5v7dAmfuxWU8uRfBKExHBWT1Iqi.s33727NoxHrbZ/h2", roles); }
			 */
		throw new UsernameNotFoundException("User not found with Username: " + username);
	}

	public DAOUser saveUser(UserDTO user) {
		DAOUser daoUser = new DAOUser();
		daoUser.setUsername(user.getUsername());
		daoUser.setPassword(passwordEncoder.encode(user.getPassword()));
		daoUser.setRole(user.getRole());
		return userDAO.save(daoUser);
	}

}
